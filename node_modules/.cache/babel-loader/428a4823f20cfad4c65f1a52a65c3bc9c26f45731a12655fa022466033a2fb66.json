{"ast":null,"code":"var _jsxFileName = \"/Users/kanayochukew/chess-game/src/components/ChessGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoard = [['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], Array(8).fill(''), Array(8).fill(''), Array(8).fill(''), Array(8).fill(''), ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']];\nconst ChessGame = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [currentPlayer, setCurrentPlayer] = useState('white');\n  const isValidMove = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const piece = board[fromRow][fromCol];\n    const targetPiece = board[toRow][toCol];\n    if (targetPiece !== '') {\n      const isCurrentPlayerPiece = currentPlayer === 'white' ? targetPiece === targetPiece.toUpperCase() : targetPiece === targetPiece.toLowerCase();\n      if (isCurrentPlayerPiece) return false;\n    }\n    return true;\n  };\n  const handleSquareClick = useCallback((row, col) => {\n    if (!selectedPiece) {\n      const piece = board[row][col];\n      if (!piece) return;\n      const isPieceCurrentPlayer = currentPlayer === 'white' ? piece === piece.toUpperCase() : piece === piece.toLowerCase();\n      if (isPieceCurrentPlayer) {\n        setSelectedPiece([row, col]);\n      }\n    } else {\n      const [selectedRow, selectedCol] = selectedPiece;\n      if (isValidMove(selectedPiece, [row, col])) {\n        const newBoard = board.map(row => [...row]);\n        newBoard[row][col] = board[selectedRow][selectedCol];\n        newBoard[selectedRow][selectedCol] = '';\n        setBoard(newBoard);\n        setCurrentPlayer(currentPlayer === 'white' ? 'black' : 'white');\n      }\n      setSelectedPiece(null);\n    }\n  }, [board, selectedPiece, currentPlayer]);\n  const getPieceSymbol = piece => {\n    const symbols = {\n      'k': '♔',\n      'q': '♕',\n      'r': '♖',\n      'b': '♗',\n      'n': '♘',\n      'p': '♙',\n      'K': '♚',\n      'Q': '♛',\n      'R': '♜',\n      'B': '♝',\n      'N': '♞',\n      'P': '♟'\n    };\n    return symbols[piece] || '';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 text-xl font-bold\",\n      children: [currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1), \"'s Turn\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-8 gap-px bg-gray-700\",\n      children: board.map((row, rowIndex) => row.map((piece, colIndex) => {\n        const isSelected = selectedPiece && selectedPiece[0] === rowIndex && selectedPiece[1] === colIndex;\n        const isLight = (rowIndex + colIndex) % 2 === 0;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `\n                  w-16 h-16 flex items-center justify-center text-4xl\n                  cursor-pointer transition-colors\n                  ${isLight ? 'bg-amber-100' : 'bg-amber-800'}\n                  ${isSelected ? 'bg-blue-300' : ''}\n                  hover:bg-blue-200\n                `,\n          onClick: () => handleSquareClick(rowIndex, colIndex),\n          children: getPieceSymbol(piece)\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }, this);\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessGame, \"QRj6/v6TPhPoaSkEgEYlwsmQmNc=\");\n_c = ChessGame;\nexport default ChessGame;\nvar _c;\n$RefreshReg$(_c, \"ChessGame\");","map":{"version":3,"names":["React","useState","useCallback","jsxDEV","_jsxDEV","initialBoard","Array","fill","ChessGame","_s","board","setBoard","selectedPiece","setSelectedPiece","currentPlayer","setCurrentPlayer","isValidMove","from","to","fromRow","fromCol","toRow","toCol","piece","targetPiece","isCurrentPlayerPiece","toUpperCase","toLowerCase","handleSquareClick","row","col","isPieceCurrentPlayer","selectedRow","selectedCol","newBoard","map","getPieceSymbol","symbols","className","children","charAt","slice","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","colIndex","isSelected","isLight","onClick","_c","$RefreshReg$"],"sources":["/Users/kanayochukew/chess-game/src/components/ChessGame.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\n\nconst initialBoard = [\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  Array(8).fill(''),\n  Array(8).fill(''),\n  Array(8).fill(''),\n  Array(8).fill(''),\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']\n];\n\nconst ChessGame = () => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [currentPlayer, setCurrentPlayer] = useState('white');\n\n  const isValidMove = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const piece = board[fromRow][fromCol];\n    const targetPiece = board[toRow][toCol];\n    \n    if (targetPiece !== '') {\n      const isCurrentPlayerPiece = currentPlayer === 'white' ? \n        targetPiece === targetPiece.toUpperCase() : \n        targetPiece === targetPiece.toLowerCase();\n      if (isCurrentPlayerPiece) return false;\n    }\n    return true;\n  };\n\n  const handleSquareClick = useCallback((row, col) => {\n    if (!selectedPiece) {\n      const piece = board[row][col];\n      if (!piece) return;\n      \n      const isPieceCurrentPlayer = currentPlayer === 'white' ? \n        piece === piece.toUpperCase() : \n        piece === piece.toLowerCase();\n      \n      if (isPieceCurrentPlayer) {\n        setSelectedPiece([row, col]);\n      }\n    } else {\n      const [selectedRow, selectedCol] = selectedPiece;\n      \n      if (isValidMove(selectedPiece, [row, col])) {\n        const newBoard = board.map(row => [...row]);\n        newBoard[row][col] = board[selectedRow][selectedCol];\n        newBoard[selectedRow][selectedCol] = '';\n        \n        setBoard(newBoard);\n        setCurrentPlayer(currentPlayer === 'white' ? 'black' : 'white');\n      }\n      setSelectedPiece(null);\n    }\n  }, [board, selectedPiece, currentPlayer]);\n\n  const getPieceSymbol = (piece) => {\n    const symbols = {\n      'k': '♔', 'q': '♕', 'r': '♖', 'b': '♗', 'n': '♘', 'p': '♙',\n      'K': '♚', 'Q': '♛', 'R': '♜', 'B': '♝', 'N': '♞', 'P': '♟'\n    };\n    return symbols[piece] || '';\n  };\n\n  return (\n    <div className=\"flex flex-col items-center p-4\">\n      <div className=\"mb-4 text-xl font-bold\">\n        {currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)}'s Turn\n      </div>\n      <div className=\"grid grid-cols-8 gap-px bg-gray-700\">\n        {board.map((row, rowIndex) => (\n          row.map((piece, colIndex) => {\n            const isSelected = selectedPiece && \n              selectedPiece[0] === rowIndex && \n              selectedPiece[1] === colIndex;\n            const isLight = (rowIndex + colIndex) % 2 === 0;\n            \n            return (\n              <div\n                key={`${rowIndex}-${colIndex}`}\n                className={`\n                  w-16 h-16 flex items-center justify-center text-4xl\n                  cursor-pointer transition-colors\n                  ${isLight ? 'bg-amber-100' : 'bg-amber-800'}\n                  ${isSelected ? 'bg-blue-300' : ''}\n                  hover:bg-blue-200\n                `}\n                onClick={() => handleSquareClick(rowIndex, colIndex)}\n              >\n                {getPieceSymbol(piece)}\n              </div>\n            );\n          })\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}